/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/subscriptionsMappers";
import * as Parameters from "../models/parameters";
import { SubscriptionClientContext } from "../subscriptionClientContext";

/** Class representing a Subscriptions. */
export class Subscriptions {
  private readonly client: SubscriptionClientContext;

  /**
   * Create a Subscriptions.
   * @param {SubscriptionClientContext} client Reference to the service client.
   */
  constructor(client: SubscriptionClientContext) {
    this.client = client;
  }

  /**
   * This operation provides all the locations that are available for resource providers; however,
   * each resource provider may support a subset of this list.
   * @summary Gets all available geo-locations.
   * @param subscriptionId The ID of the target subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsListLocationsResponse>
   */
  listLocations(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsListLocationsResponse>;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param callback The callback
   */
  listLocations(subscriptionId: string, callback: msRest.ServiceCallback<Models.LocationListResult>): void;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listLocations(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LocationListResult>): void;
  listLocations(subscriptionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LocationListResult>, callback?: msRest.ServiceCallback<Models.LocationListResult>): Promise<Models.SubscriptionsListLocationsResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      listLocationsOperationSpec,
      callback) as Promise<Models.SubscriptionsListLocationsResponse>;
  }

  /**
   * Gets details about a specified subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsGetResponse>
   */
  get(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsGetResponse>;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param callback The callback
   */
  get(subscriptionId: string, callback: msRest.ServiceCallback<Models.Subscription>): void;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(subscriptionId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Subscription>): void;
  get(subscriptionId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Subscription>, callback?: msRest.ServiceCallback<Models.Subscription>): Promise<Models.SubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SubscriptionsGetResponse>;
  }

  /**
   * Gets all subscriptions for a tenant.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.SubscriptionListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionListResult>, callback?: msRest.ServiceCallback<Models.SubscriptionListResult>): Promise<Models.SubscriptionsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SubscriptionsListResponse>;
  }

  /**
   * Creates an Azure subscription
   * @param enrollmentAccountName The name of the enrollment account to which the subscription will
   * be billed.
   * @param body The subscription creation parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsCreateSubscriptionInEnrollmentAccountResponse>
   */
  createSubscriptionInEnrollmentAccount(enrollmentAccountName: string, body: Models.SubscriptionCreationParameters, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsCreateSubscriptionInEnrollmentAccountResponse> {
    return this.beginCreateSubscriptionInEnrollmentAccount(enrollmentAccountName,body,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SubscriptionsCreateSubscriptionInEnrollmentAccountResponse>;
  }

  /**
   * The operation to create a new WebDirect or EA Azure subscription.
   * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which
   * you want to create the subscription.
   * @param billingProfileName The name of the billing profile in the billing account for which you
   * want to create the subscription.
   * @param invoiceSectionName The name of the invoice section in the billing account for which you
   * want to create the subscription.
   * @param body The subscription creation parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsCreateSubscriptionResponse>
   */
  createSubscription(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, body: Models.ModernSubscriptionCreationParameters, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsCreateSubscriptionResponse> {
    return this.beginCreateSubscription(billingAccountName,billingProfileName,invoiceSectionName,body,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SubscriptionsCreateSubscriptionResponse>;
  }

  /**
   * The operation to create a new CSP subscription.
   * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which
   * you want to create the subscription.
   * @param customerName The name of the customer.
   * @param body The subscription creation parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsCreateCspSubscriptionResponse>
   */
  createCspSubscription(billingAccountName: string, customerName: string, body: Models.ModernCspSubscriptionCreationParameters, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsCreateCspSubscriptionResponse> {
    return this.beginCreateCspSubscription(billingAccountName,customerName,body,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SubscriptionsCreateCspSubscriptionResponse>;
  }

  /**
   * Create Alias Subscription.
   * @param aliasName Alias Name
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsCreateAliasResponse>
   */
  createAlias(aliasName: string, body: Models.PutAliasRequest, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsCreateAliasResponse> {
    return this.beginCreateAlias(aliasName,body,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SubscriptionsCreateAliasResponse>;
  }

  /**
   * Get Alias Subscription.
   * @param aliasName Alias Name
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsGetAliasResponse>
   */
  getAlias(aliasName: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsGetAliasResponse>;
  /**
   * @param aliasName Alias Name
   * @param callback The callback
   */
  getAlias(aliasName: string, callback: msRest.ServiceCallback<Models.SubscriptionAliasResponse>): void;
  /**
   * @param aliasName Alias Name
   * @param options The optional parameters
   * @param callback The callback
   */
  getAlias(aliasName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionAliasResponse>): void;
  getAlias(aliasName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionAliasResponse>, callback?: msRest.ServiceCallback<Models.SubscriptionAliasResponse>): Promise<Models.SubscriptionsGetAliasResponse> {
    return this.client.sendOperationRequest(
      {
        aliasName,
        options
      },
      getAliasOperationSpec,
      callback) as Promise<Models.SubscriptionsGetAliasResponse>;
  }

  /**
   * Delete Alias.
   * @param aliasName Alias Name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAlias(aliasName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param aliasName Alias Name
   * @param callback The callback
   */
  deleteAlias(aliasName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param aliasName Alias Name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAlias(aliasName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAlias(aliasName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        aliasName,
        options
      },
      deleteAliasOperationSpec,
      callback);
  }

  /**
   * List Alias Subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsListAliasResponse>
   */
  listAlias(options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsListAliasResponse>;
  /**
   * @param callback The callback
   */
  listAlias(callback: msRest.ServiceCallback<Models.SubscriptionAliasListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listAlias(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionAliasListResult>): void;
  listAlias(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionAliasListResult>, callback?: msRest.ServiceCallback<Models.SubscriptionAliasListResult>): Promise<Models.SubscriptionsListAliasResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listAliasOperationSpec,
      callback) as Promise<Models.SubscriptionsListAliasResponse>;
  }

  /**
   * Redeem subscription.
   * @param subscriptionId Subscription Id.
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsRedeemResponse>
   */
  redeem(subscriptionId: string, body: Models.RedeemSubscriptionRequest, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsRedeemResponse> {
    return this.beginRedeem(subscriptionId,body,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.SubscriptionsRedeemResponse>;
  }

  /**
   * Creates an Azure subscription
   * @param enrollmentAccountName The name of the enrollment account to which the subscription will
   * be billed.
   * @param body The subscription creation parameters.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateSubscriptionInEnrollmentAccount(enrollmentAccountName: string, body: Models.SubscriptionCreationParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        enrollmentAccountName,
        body,
        options
      },
      beginCreateSubscriptionInEnrollmentAccountOperationSpec,
      options);
  }

  /**
   * The operation to create a new WebDirect or EA Azure subscription.
   * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which
   * you want to create the subscription.
   * @param billingProfileName The name of the billing profile in the billing account for which you
   * want to create the subscription.
   * @param invoiceSectionName The name of the invoice section in the billing account for which you
   * want to create the subscription.
   * @param body The subscription creation parameters.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateSubscription(billingAccountName: string, billingProfileName: string, invoiceSectionName: string, body: Models.ModernSubscriptionCreationParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        body,
        options
      },
      beginCreateSubscriptionOperationSpec,
      options);
  }

  /**
   * The operation to create a new CSP subscription.
   * @param billingAccountName The name of the Microsoft Customer Agreement billing account for which
   * you want to create the subscription.
   * @param customerName The name of the customer.
   * @param body The subscription creation parameters.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateCspSubscription(billingAccountName: string, customerName: string, body: Models.ModernCspSubscriptionCreationParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        billingAccountName,
        customerName,
        body,
        options
      },
      beginCreateCspSubscriptionOperationSpec,
      options);
  }

  /**
   * Create Alias Subscription.
   * @param aliasName Alias Name
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateAlias(aliasName: string, body: Models.PutAliasRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        aliasName,
        body,
        options
      },
      beginCreateAliasOperationSpec,
      options);
  }

  /**
   * Redeem subscription.
   * @param subscriptionId Subscription Id.
   * @param body
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRedeem(subscriptionId: string, body: Models.RedeemSubscriptionRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        subscriptionId,
        body,
        options
      },
      beginRedeemOperationSpec,
      options);
  }

  /**
   * Gets all subscriptions for a tenant.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SubscriptionsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SubscriptionsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SubscriptionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SubscriptionListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SubscriptionListResult>, callback?: msRest.ServiceCallback<Models.SubscriptionListResult>): Promise<Models.SubscriptionsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SubscriptionsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listLocationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/locations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LocationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Subscription
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions",
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getAliasOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Subscription/aliases/{aliasName}",
  urlParameters: [
    Parameters.aliasName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionAliasResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  serializer
};

const deleteAliasOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "providers/Microsoft.Subscription/aliases/{aliasName}",
  urlParameters: [
    Parameters.aliasName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  serializer
};

const listAliasOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Subscription/aliases",
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionAliasListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  serializer
};

const beginCreateSubscriptionInEnrollmentAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountName}/providers/Microsoft.Subscription/createSubscription",
  urlParameters: [
    Parameters.enrollmentAccountName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.SubscriptionCreationParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionCreationResult,
      headersMapper: Mappers.SubscriptionsCreateSubscriptionInEnrollmentAccountHeaders
    },
    202: {
      headersMapper: Mappers.SubscriptionsCreateSubscriptionInEnrollmentAccountHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody,
      headersMapper: Mappers.SubscriptionsCreateSubscriptionInEnrollmentAccountHeaders
    }
  },
  serializer
};

const beginCreateSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/providers/Microsoft.Subscription/createSubscription",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ModernSubscriptionCreationParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionCreationResult,
      headersMapper: Mappers.SubscriptionsCreateSubscriptionHeaders
    },
    202: {
      headersMapper: Mappers.SubscriptionsCreateSubscriptionHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody,
      headersMapper: Mappers.SubscriptionsCreateSubscriptionHeaders
    }
  },
  serializer
};

const beginCreateCspSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/providers/Microsoft.Subscription/createSubscription",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.customerName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.ModernCspSubscriptionCreationParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionCreationResult,
      headersMapper: Mappers.SubscriptionsCreateCspSubscriptionHeaders
    },
    202: {
      headersMapper: Mappers.SubscriptionsCreateCspSubscriptionHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody,
      headersMapper: Mappers.SubscriptionsCreateCspSubscriptionHeaders
    }
  },
  serializer
};

const beginCreateAliasOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Subscription/aliases/{aliasName}",
  urlParameters: [
    Parameters.aliasName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.PutAliasRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionAliasResponse
    },
    201: {
      bodyMapper: Mappers.SubscriptionAliasResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  serializer
};

const beginRedeemOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Subscription/subscriptions/{subscriptionId}/redeem",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.RedeemSubscriptionRequest,
      required: true
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.SubscriptionsRedeemHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody,
      headersMapper: Mappers.SubscriptionsRedeemHeaders
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Article of event.
 */
export interface EventPropertiesArticle {
  /**
   * Article content of event.
   */
  articleContent?: string;
}

/**
 * Display text of link.
 */
export interface LinkDisplayText {
  /**
   * Display text of link.
   */
  value?: string;
  /**
   * Localized display text of link.
   */
  localizedValue?: string;
}

/**
 * Useful links for service health event.
 */
export interface Link {
  /**
   * Type of link. Possible values include: 'Button', 'Hyperlink'
   */
  type?: LinkTypeValues;
  /**
   * Display text of link.
   */
  displayText?: LinkDisplayText;
  /**
   * It provides the name of portal extension to produce link for given service health event.
   */
  extensionName?: string;
  /**
   * It provides the name of portal extension blade to produce link for given service health event.
   */
  bladeName?: string;
  /**
   * It provides a map of parameter name and value for portal extension blade to produce lik for
   * given service health event.
   */
  parameters?: any;
}

/**
 * Update for service health event.
 */
export interface Update {
  /**
   * Summary text for the given update for the service health event.
   */
  summary?: string;
  /**
   * It provides the Timestamp for the given update for the service health event.
   */
  updateDateTime?: Date;
}

/**
 * Azure region impacted by the service health event.
 */
export interface ImpactedServiceRegion {
  /**
   * Impacted region name.
   */
  impactedRegion?: string;
  /**
   * Current status of event in the region. Possible values include: 'Active', 'Resolved'
   */
  status?: EventStatusValues;
  /**
   * List subscription impacted by the service health event.
   */
  impactedSubscriptions?: string[];
  /**
   * It provides the Timestamp for when the last update for the service health event.
   */
  lastUpdateTime?: Date;
  /**
   * List of updates for given service health event.
   */
  updates?: Update[];
}

/**
 * Azure service impacted by the service health event.
 */
export interface Impact {
  /**
   * Impacted service name.
   */
  impactedService?: string;
  /**
   * List regions impacted by the service health event.
   */
  impactedRegions?: ImpactedServiceRegion[];
}

/**
 * Recommended action for the service health event.
 */
export interface EventPropertiesRecommendedActionsActionsItem {
  /**
   * Recommended action group Id for the service health event.
   */
  groupId?: number;
  /**
   * Recommended action text
   */
  actionText?: string;
}

/**
 * Recommended actions of event.
 */
export interface EventPropertiesRecommendedActions {
  /**
   * Recommended action title for the service health event.
   */
  message?: string;
  /**
   * Recommended actions for the service health event.
   */
  actions?: EventPropertiesRecommendedActionsActionsItem[];
  /**
   * Recommended action locale for the service health event.
   */
  localeCode?: string;
}

/**
 * Frequently asked question for the service health event
 */
export interface Faq {
  /**
   * FAQ question for the service health event.
   */
  question?: string;
  /**
   * FAQ answer for the service health event.
   */
  answer?: string;
  /**
   * FAQ locale for the service health event.
   */
  localeCode?: string;
}

/**
 * Common fields that are returned in the response for all Azure Resource Manager resources
 * @summary Resource
 */
export interface Resource extends BaseResource {
  /**
   * Fully qualified resource ID for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
   * "Microsoft.Storage/storageAccounts"
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Service health event
 */
export interface Event extends Resource {
  /**
   * Type of event. Possible values include: 'ServiceIssue', 'PlannedMaintenance',
   * 'HealthAdvisory', 'RCA'
   */
  eventType?: EventTypeValues;
  /**
   * Source of event. Possible values include: 'ResourceHealth', 'ServiceHealth'
   */
  eventSource?: EventSourceValues;
  /**
   * Current status of event. Possible values include: 'Active', 'Resolved'
   */
  status?: EventStatusValues;
  /**
   * Title text of event.
   */
  title?: string;
  /**
   * Summary text of event.
   */
  summary?: string;
  /**
   * Header text of event.
   */
  header?: string;
  /**
   * Level of insight. Possible values include: 'Critical', 'Warning'
   */
  level?: LevelValues;
  /**
   * Level of event. Possible values include: 'Critical', 'Warning', 'Informational'
   */
  eventLevel?: EventLevelValues;
  /**
   * Article of event.
   */
  article?: EventPropertiesArticle;
  /**
   * Useful links of event.
   */
  links?: Link[];
  /**
   * It provides the Timestamp for when the health impacting event started.
   */
  impactStartTime?: Date;
  /**
   * It provides the Timestamp for when the health impacting event resolved.
   */
  impactMitigationTime?: Date;
  /**
   * List services impacted by the service health event.
   */
  impact?: Impact[];
  /**
   * Recommended actions of event.
   */
  recommendedActions?: EventPropertiesRecommendedActions;
  /**
   * Frequently asked questions for the service health event.
   */
  faqs?: Faq[];
  /**
   * It provides information if the event is High incident rate event or not.
   */
  isHIR?: boolean;
  /**
   * Tells if we want to enable or disable Microsoft Support for this event.
   */
  enableMicrosoftSupport?: boolean;
  /**
   * Tells if we want to enable or disable Microsoft Support for this event.
   */
  enableChatWithUs?: boolean;
  /**
   * Priority level of the event.
   */
  priority?: number;
  /**
   * It provides the Timestamp for when the health impacting event was last updated.
   */
  lastUpdateTime?: Date;
  /**
   * Stage for HIR Document
   */
  hirStage?: string;
}

/**
 * An annotation describing a change in the availabilityState to Available from Unavailable with a
 * reasonType of type Unplanned
 */
export interface AvailabilityStatusPropertiesRecentlyResolved {
  /**
   * Timestamp for when the availabilityState changed to Unavailable
   */
  unavailableOccurredTime?: Date;
  /**
   * Timestamp when the availabilityState changes to Available.
   */
  resolvedTime?: Date;
  /**
   * Brief description of cause of the resource becoming unavailable.
   */
  unavailabilitySummary?: string;
}

/**
 * Lists actions the user can take based on the current availabilityState of the resource.
 */
export interface RecommendedAction {
  /**
   * Recommended action.
   */
  action?: string;
  /**
   * Link to the action
   */
  actionUrl?: string;
  /**
   * Substring of action, it describes which text should host the action url.
   */
  actionUrlText?: string;
}

/**
 * Status of the service impacting event.
 */
export interface ServiceImpactingEventStatus {
  /**
   * Current status of the event
   */
  value?: string;
}

/**
 * Properties of the service impacting event.
 */
export interface ServiceImpactingEventIncidentProperties {
  /**
   * Title of the incident.
   */
  title?: string;
  /**
   * Service impacted by the event.
   */
  service?: string;
  /**
   * Region impacted by the event.
   */
  region?: string;
  /**
   * Type of Event.
   */
  incidentType?: string;
}

/**
 * Lists the service impacting events that may be affecting the health of the resource.
 */
export interface ServiceImpactingEvent {
  /**
   * Timestamp for when the event started.
   */
  eventStartTime?: Date;
  /**
   * Timestamp for when event was submitted/detected.
   */
  eventStatusLastModifiedTime?: Date;
  /**
   * Correlation id for the event
   */
  correlationId?: string;
  /**
   * Status of the service impacting event.
   */
  status?: ServiceImpactingEventStatus;
  /**
   * Properties of the service impacting event.
   */
  incidentProperties?: ServiceImpactingEventIncidentProperties;
}

/**
 * Properties of availability state.
 */
export interface AvailabilityStatusProperties {
  /**
   * Availability status of the resource. When it is null, this availabilityStatus object
   * represents an availability impacting event. Possible values include: 'Available',
   * 'Unavailable', 'Degraded', 'Unknown'
   */
  availabilityState?: AvailabilityStateValues;
  /**
   * Summary description of the availability status.
   */
  summary?: string;
  /**
   * Details of the availability status.
   */
  detailedStatus?: string;
  /**
   * When the resource's availabilityState is Unavailable, it describes where the health impacting
   * event was originated. Examples are planned, unplanned, user initiated or an outage etc.
   */
  reasonType?: string;
  /**
   * When the resource's availabilityState is Unavailable, it provides the Timestamp for when the
   * health impacting event was received.
   */
  rootCauseAttributionTime?: Date;
  /**
   * In case of an availability impacting event, it describes when the health impacting event was
   * originated. Examples are Lifecycle, Downtime, Fault Analysis etc.
   */
  healthEventType?: string;
  /**
   * In case of an availability impacting event, it describes where the health impacting event was
   * originated. Examples are PlatformInitiated, UserInitiated etc.
   */
  healthEventCause?: string;
  /**
   * In case of an availability impacting event, it describes the category of a PlatformInitiated
   * health impacting event. Examples are Planned, Unplanned etc.
   */
  healthEventCategory?: string;
  /**
   * It is a unique Id that identifies the event
   */
  healthEventId?: string;
  /**
   * When the resource's availabilityState is Unavailable and the reasonType is not User Initiated,
   * it provides the date and time for when the issue is expected to be resolved.
   */
  resolutionETA?: Date;
  /**
   * Timestamp for when last change in health status occurred.
   */
  occurredTime?: Date;
  /**
   * Chronicity of the availability transition. Possible values include: 'Transient', 'Persistent'
   */
  reasonChronicity?: ReasonChronicityTypes;
  /**
   * Timestamp for when the health was last checked.
   */
  reportedTime?: Date;
  /**
   * An annotation describing a change in the availabilityState to Available from Unavailable with
   * a reasonType of type Unplanned
   */
  recentlyResolved?: AvailabilityStatusPropertiesRecentlyResolved;
  /**
   * Lists actions the user can take based on the current availabilityState of the resource.
   */
  recommendedActions?: RecommendedAction[];
  /**
   * Lists the service impacting events that may be affecting the health of the resource.
   */
  serviceImpactingEvents?: ServiceImpactingEvent[];
}

/**
 * availabilityStatus of a resource.
 */
export interface AvailabilityStatus {
  /**
   * Azure Resource Manager Identity for the availabilityStatuses resource.
   */
  id?: string;
  /**
   * current.
   */
  name?: string;
  /**
   * Microsoft.ResourceHealth/AvailabilityStatuses.
   */
  type?: string;
  /**
   * Azure Resource Manager geo location of the resource.
   */
  location?: string;
  /**
   * Properties of availability state.
   */
  properties?: AvailabilityStatusProperties;
}

/**
 * Banner type of emerging issue.
 */
export interface StatusBanner {
  /**
   * The banner title.
   */
  title?: string;
  /**
   * The details of banner.
   */
  message?: string;
  /**
   * The cloud type of this banner.
   */
  cloud?: string;
  /**
   * The last time modified on this banner.
   */
  lastModifiedTime?: Date;
}

/**
 * Object of impacted region.
 */
export interface ImpactedRegion {
  /**
   * The impacted region id.
   */
  id?: string;
  /**
   * The impacted region name.
   */
  name?: string;
}

/**
 * Object of the emerging issue impact on services and regions.
 */
export interface EmergingIssueImpact {
  /**
   * The impacted service id.
   */
  id?: string;
  /**
   * The impacted service name.
   */
  name?: string;
  /**
   * The list of impacted regions for corresponding emerging issues.
   */
  regions?: ImpactedRegion[];
}

/**
 * Active event type of emerging issue.
 */
export interface StatusActiveEvent {
  /**
   * The active event title.
   */
  title?: string;
  /**
   * The details of active event.
   */
  description?: string;
  /**
   * The tracking id of this active event.
   */
  trackingId?: string;
  /**
   * The impact start time on this active event.
   */
  startTime?: Date;
  /**
   * The cloud type of this active event.
   */
  cloud?: string;
  /**
   * The severity level of this active event. Possible values include: 'Information', 'Warning',
   * 'Error'
   */
  severity?: SeverityValues;
  /**
   * The stage of this active event. Possible values include: 'Active', 'Resolve', 'Archived'
   */
  stage?: StageValues;
  /**
   * The boolean value of this active event if published or not.
   */
  published?: boolean;
  /**
   * The last time modified on this banner.
   */
  lastModifiedTime?: Date;
  /**
   * The list of emerging issues impacts.
   */
  impacts?: EmergingIssueImpact[];
}

/**
 * The Get EmergingIssues operation response.
 */
export interface EmergingIssuesGetResult extends Resource {
  /**
   * Timestamp for when last time refreshed for ongoing emerging issue.
   */
  refreshTimestamp?: Date;
  /**
   * The list of emerging issues of banner type.
   */
  statusBanners?: StatusBanner[];
  /**
   * The list of emerging issues of active event type.
   */
  statusActiveEvents?: StatusActiveEvent[];
}

/**
 * ICM incidents that are related to a potential outage detected by Brain.
 */
export interface IcmIncidents {
  /**
   * Id for the incident.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly icmId?: string;
  /**
   * Incident severity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly severity?: number;
  /**
   * Incident state. Possible values include: 'INVALID', 'ACTIVE', 'RESOLVED', 'NEW', 'MITIGATING',
   * 'CORRELATING', 'MITIGATED', 'HOLDING', 'SUPPRESSED'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: State;
  /**
   * ICM link for the incident.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly icmLink?: string;
  /**
   * Title for the incident.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly title?: string;
  /**
   * Incident impact start date and time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly impactStartTime?: Date;
  /**
   * Incident impact mitigation date and time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly impactMitigateTime?: Date;
  /**
   * DataCenters impacted by incident.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly impactedDataCenters?: string[];
  /**
   * Services impacted by incident.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly impactedServices?: string[];
  /**
   * Resource types impacted by incident.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly impactedResourceTypes?: string[];
}

/**
 * The Get PotentialOutages operation response.
 */
export interface PotentialOutagesGetResult extends Resource {
  /**
   * Id for the potential outage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly outageId?: string;
  /**
   * Title for the potential outage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly title?: string;
  /**
   * Confidence score for the potential outage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly confidenceScore?: number;
  /**
   * Confidence level for the potential outage.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly confidence?: string;
  /**
   * Regions impacted by potential outages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly impactedRegions?: string[];
  /**
   * Time and date the potential outage is detected.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly detectedDateTime?: Date;
  /**
   * Datacenters impacted by potential outages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly impactedDataCenters?: string[];
  /**
   * Services impacted by potential outages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly impactedServices?: string[];
  /**
   * Resource types impacted by potential outages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly impactedResourceTypes?: string[];
  /**
   * Symptoms of potential outages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly symptoms?: string[];
  /**
   * A list of outage incidents.
   */
  incidents?: IcmIncidents[];
}

/**
 * Properties of the operation.
 */
export interface OperationDisplay {
  /**
   * Provider name.
   */
  provider?: string;
  /**
   * Resource name.
   */
  resource?: string;
  /**
   * Operation name.
   */
  operation?: string;
  /**
   * Description of the operation.
   */
  description?: string;
}

/**
 * Operation available in the resourcehealth resource provider.
 */
export interface Operation {
  /**
   * Name of the operation.
   */
  name?: string;
  /**
   * Properties of the operation.
   */
  display?: OperationDisplay;
}

/**
 * Lists the operations response.
 */
export interface OperationListResult {
  /**
   * List of operations available in the resourcehealth resource provider.
   */
  value: Operation[];
}

/**
 * Error details.
 */
export interface ErrorResponse {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: string;
}

/**
 * Error details.
 */
export interface WrappedErrorResponse {
  /**
   * The error object.
   */
  error?: ErrorResponse;
}

/**
 * The metadata supported value detail.
 */
export interface MetadataSupportedValueDetail {
  /**
   * The id.
   */
  id?: string;
  /**
   * The display name.
   */
  displayName?: string;
}

/**
 * The metadata entity contract.
 */
export interface MetadataEntity extends Resource {
  /**
   * The display name.
   */
  displayName?: string;
  /**
   * The list of keys on which this entity depends on.
   */
  dependsOn?: string[];
  /**
   * The list of scenarios applicable to this metadata entity.
   */
  applicableScenarios?: Scenario[];
  /**
   * The list of supported values.
   */
  supportedValues?: MetadataSupportedValueDetail[];
}

/**
 * The list of metadata entities
 */
export interface MetadataEntityListResult {
  /**
   * The list of metadata entities.
   */
  value?: MetadataEntity[];
  /**
   * The link used to get the next page of metadata.
   */
  nextLink?: string;
}

/**
 * The resource model definition for a Azure Resource Manager proxy resource. It will not have tags
 * and a location
 * @summary Proxy Resource
 */
export interface ProxyResource extends Resource {
}

/**
 * The resource model definition for an Azure Resource Manager tracked top level resource which has
 * 'tags' and a 'location'
 * @summary Tracked Resource
 */
export interface TrackedResource extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The geo-location where the resource lives
   */
  location: string;
}

/**
 * The resource model definition for an Azure Resource Manager resource with an etag.
 * @summary Entity Resource
 */
export interface AzureEntityResource extends Resource {
  /**
   * Resource Etag.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * Optional Parameters.
 */
export interface EventsListBySubscriptionIdOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * setting view=full expands the article parameters
   */
  view?: string;
}

/**
 * Optional Parameters.
 */
export interface EventsListBySingleResourceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * setting view=full expands the article parameters
   */
  view?: string;
}

/**
 * Optional Parameters.
 */
export interface EventsListBySubscriptionIdNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * setting view=full expands the article parameters
   */
  view?: string;
}

/**
 * Optional Parameters.
 */
export interface EventsListBySingleResourceNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * setting view=full expands the article parameters
   */
  view?: string;
}

/**
 * Optional Parameters.
 */
export interface AvailabilityStatusesListBySubscriptionIdOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * Setting $expand=recommendedactions in url query expands the recommendedactions in the
   * response.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface AvailabilityStatusesListByResourceGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * Setting $expand=recommendedactions in url query expands the recommendedactions in the
   * response.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface AvailabilityStatusesGetByResourceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * Setting $expand=recommendedactions in url query expands the recommendedactions in the
   * response.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface AvailabilityStatusesListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * Setting $expand=recommendedactions in url query expands the recommendedactions in the
   * response.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface AvailabilityStatusesListBySubscriptionIdNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * Setting $expand=recommendedactions in url query expands the recommendedactions in the
   * response.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface AvailabilityStatusesListByResourceGroupNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * Setting $expand=recommendedactions in url query expands the recommendedactions in the
   * response.
   */
  expand?: string;
}

/**
 * Optional Parameters.
 */
export interface AvailabilityStatusesListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. For more information please see
   * https://docs.microsoft.com/en-us/rest/api/apimanagement/apis?redirectedfrom=MSDN
   */
  filter?: string;
  /**
   * Setting $expand=recommendedactions in url query expands the recommendedactions in the
   * response.
   */
  expand?: string;
}

/**
 * An interface representing MicrosoftResourceHealthOptions.
 */
export interface MicrosoftResourceHealthOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The List events operation response.
 * @extends Array<Event>
 */
export interface Events extends Array<Event> {
  /**
   * The URI to fetch the next page of events. Call ListNext() with this URI to fetch the next page
   * of events.
   */
  nextLink?: string;
}

/**
 * @interface
 * The List availabilityStatus operation response.
 * @extends Array<AvailabilityStatus>
 */
export interface AvailabilityStatusListResult extends Array<AvailabilityStatus> {
  /**
   * The URI to fetch the next page of availabilityStatuses. Call ListNext() with this URI to fetch
   * the next page of availabilityStatuses.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of emerging issues.
 * @extends Array<EmergingIssuesGetResult>
 */
export interface EmergingIssueListResult extends Array<EmergingIssuesGetResult> {
  /**
   * The link used to get the next page of emerging issues.
   */
  nextLink?: string;
}

/**
 * @interface
 * The list of potential outages.
 * @extends Array<PotentialOutagesGetResult>
 */
export interface PotentialOutageListResult extends Array<PotentialOutagesGetResult> {
  /**
   * The link used to get the next page of potential outages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for EventTypeValues.
 * Possible values include: 'ServiceIssue', 'PlannedMaintenance', 'HealthAdvisory', 'RCA'
 * @readonly
 * @enum {string}
 */
export type EventTypeValues = 'ServiceIssue' | 'PlannedMaintenance' | 'HealthAdvisory' | 'RCA';

/**
 * Defines values for EventSourceValues.
 * Possible values include: 'ResourceHealth', 'ServiceHealth'
 * @readonly
 * @enum {string}
 */
export type EventSourceValues = 'ResourceHealth' | 'ServiceHealth';

/**
 * Defines values for EventStatusValues.
 * Possible values include: 'Active', 'Resolved'
 * @readonly
 * @enum {string}
 */
export type EventStatusValues = 'Active' | 'Resolved';

/**
 * Defines values for LevelValues.
 * Possible values include: 'Critical', 'Warning'
 * @readonly
 * @enum {string}
 */
export type LevelValues = 'Critical' | 'Warning';

/**
 * Defines values for EventLevelValues.
 * Possible values include: 'Critical', 'Warning', 'Informational'
 * @readonly
 * @enum {string}
 */
export type EventLevelValues = 'Critical' | 'Warning' | 'Informational';

/**
 * Defines values for LinkTypeValues.
 * Possible values include: 'Button', 'Hyperlink'
 * @readonly
 * @enum {string}
 */
export type LinkTypeValues = 'Button' | 'Hyperlink';

/**
 * Defines values for AvailabilityStateValues.
 * Possible values include: 'Available', 'Unavailable', 'Degraded', 'Unknown'
 * @readonly
 * @enum {string}
 */
export type AvailabilityStateValues = 'Available' | 'Unavailable' | 'Degraded' | 'Unknown';

/**
 * Defines values for ReasonChronicityTypes.
 * Possible values include: 'Transient', 'Persistent'
 * @readonly
 * @enum {string}
 */
export type ReasonChronicityTypes = 'Transient' | 'Persistent';

/**
 * Defines values for SeverityValues.
 * Possible values include: 'Information', 'Warning', 'Error'
 * @readonly
 * @enum {string}
 */
export type SeverityValues = 'Information' | 'Warning' | 'Error';

/**
 * Defines values for StageValues.
 * Possible values include: 'Active', 'Resolve', 'Archived'
 * @readonly
 * @enum {string}
 */
export type StageValues = 'Active' | 'Resolve' | 'Archived';

/**
 * Defines values for State.
 * Possible values include: 'INVALID', 'ACTIVE', 'RESOLVED', 'NEW', 'MITIGATING', 'CORRELATING',
 * 'MITIGATED', 'HOLDING', 'SUPPRESSED'
 * @readonly
 * @enum {string}
 */
export type State = 'INVALID' | 'ACTIVE' | 'RESOLVED' | 'NEW' | 'MITIGATING' | 'CORRELATING' | 'MITIGATED' | 'HOLDING' | 'SUPPRESSED';

/**
 * Defines values for Scenario.
 * Possible values include: 'Alerts'
 * @readonly
 * @enum {string}
 */
export type Scenario = 'Alerts';

/**
 * Contains response data for the listBySubscriptionId operation.
 */
export type EventsListBySubscriptionIdResponse = Events & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Events;
    };
};

/**
 * Contains response data for the listBySingleResource operation.
 */
export type EventsListBySingleResourceResponse = Events & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Events;
    };
};

/**
 * Contains response data for the listBySubscriptionIdNext operation.
 */
export type EventsListBySubscriptionIdNextResponse = Events & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Events;
    };
};

/**
 * Contains response data for the listBySingleResourceNext operation.
 */
export type EventsListBySingleResourceNextResponse = Events & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Events;
    };
};

/**
 * Contains response data for the listBySubscriptionId operation.
 */
export type AvailabilityStatusesListBySubscriptionIdResponse = AvailabilityStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailabilityStatusListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type AvailabilityStatusesListByResourceGroupResponse = AvailabilityStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailabilityStatusListResult;
    };
};

/**
 * Contains response data for the getByResource operation.
 */
export type AvailabilityStatusesGetByResourceResponse = AvailabilityStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailabilityStatus;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AvailabilityStatusesListResponse = AvailabilityStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailabilityStatusListResult;
    };
};

/**
 * Contains response data for the listBySubscriptionIdNext operation.
 */
export type AvailabilityStatusesListBySubscriptionIdNextResponse = AvailabilityStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailabilityStatusListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type AvailabilityStatusesListByResourceGroupNextResponse = AvailabilityStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailabilityStatusListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AvailabilityStatusesListNextResponse = AvailabilityStatusListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailabilityStatusListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type EmergingIssuesGetResponse = EmergingIssuesGetResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EmergingIssuesGetResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type EmergingIssuesListResponse = EmergingIssueListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EmergingIssueListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type EmergingIssuesListNextResponse = EmergingIssueListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EmergingIssueListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PotentialOutagesGetResponse = PotentialOutagesGetResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PotentialOutagesGetResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PotentialOutagesListResponse = PotentialOutageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PotentialOutageListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PotentialOutagesListNextResponse = PotentialOutageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PotentialOutageListResult;
    };
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/datastoresMappers";
import * as Parameters from "../models/parameters";
import { AzureMachineLearningWorkspacesContext } from "../azureMachineLearningWorkspacesContext";

/** Class representing a Datastores. */
export class Datastores {
  private readonly client: AzureMachineLearningWorkspacesContext;

  /**
   * Create a Datastores.
   * @param {AzureMachineLearningWorkspacesContext} client Reference to the service client.
   */
  constructor(client: AzureMachineLearningWorkspacesContext) {
    this.client = client;
  }

  /**
   * @summary List datastores.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatastoresListResponse>
   */
  list(resourceGroupName: string, workspaceName: string, options?: Models.DatastoresListOptionalParams): Promise<Models.DatastoresListResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param callback The callback
   */
  list(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.DatastorePropertiesResourceArmPaginatedResult>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, workspaceName: string, options: Models.DatastoresListOptionalParams, callback: msRest.ServiceCallback<Models.DatastorePropertiesResourceArmPaginatedResult>): void;
  list(resourceGroupName: string, workspaceName: string, options?: Models.DatastoresListOptionalParams | msRest.ServiceCallback<Models.DatastorePropertiesResourceArmPaginatedResult>, callback?: msRest.ServiceCallback<Models.DatastorePropertiesResourceArmPaginatedResult>): Promise<Models.DatastoresListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.DatastoresListResponse>;
  }

  /**
   * @summary Delete datastore.
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(name: string, resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param callback The callback
   */
  deleteMethod(name: string, resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(name: string, resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(name: string, resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        resourceGroupName,
        workspaceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * @summary Get datastore.
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatastoresGetResponse>
   */
  get(name: string, resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatastoresGetResponse>;
  /**
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param callback The callback
   */
  get(name: string, resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.DatastorePropertiesResource>): void;
  /**
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(name: string, resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatastorePropertiesResource>): void;
  get(name: string, resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatastorePropertiesResource>, callback?: msRest.ServiceCallback<Models.DatastorePropertiesResource>): Promise<Models.DatastoresGetResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        resourceGroupName,
        workspaceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DatastoresGetResponse>;
  }

  /**
   * @summary Create or update datastore.
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param body Datastore entity to create or update.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatastoresCreateOrUpdateResponse>
   */
  createOrUpdate(name: string, resourceGroupName: string, workspaceName: string, body: Models.Body, options?: msRest.RequestOptionsBase): Promise<Models.DatastoresCreateOrUpdateResponse>;
  /**
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param body Datastore entity to create or update.
   * @param callback The callback
   */
  createOrUpdate(name: string, resourceGroupName: string, workspaceName: string, body: Models.Body, callback: msRest.ServiceCallback<Models.DatastorePropertiesResource>): void;
  /**
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param body Datastore entity to create or update.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(name: string, resourceGroupName: string, workspaceName: string, body: Models.Body, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatastorePropertiesResource>): void;
  createOrUpdate(name: string, resourceGroupName: string, workspaceName: string, body: Models.Body, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatastorePropertiesResource>, callback?: msRest.ServiceCallback<Models.DatastorePropertiesResource>): Promise<Models.DatastoresCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        resourceGroupName,
        workspaceName,
        body,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.DatastoresCreateOrUpdateResponse>;
  }

  /**
   * @summary Get datastore secrets.
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatastoresListSecretsResponse>
   */
  listSecrets(name: string, resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.DatastoresListSecretsResponse>;
  /**
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param callback The callback
   */
  listSecrets(name: string, resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.DatastoreCredentials>): void;
  /**
   * @param name Datastore name.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSecrets(name: string, resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DatastoreCredentials>): void;
  listSecrets(name: string, resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DatastoreCredentials>, callback?: msRest.ServiceCallback<Models.DatastoreCredentials>): Promise<Models.DatastoresListSecretsResponse> {
    return this.client.sendOperationRequest(
      {
        name,
        resourceGroupName,
        workspaceName,
        options
      },
      listSecretsOperationSpec,
      callback) as Promise<Models.DatastoresListSecretsResponse>;
  }

  /**
   * @summary List datastores.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DatastoresListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.DatastoresListNextOptionalParams): Promise<Models.DatastoresListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DatastorePropertiesResourceArmPaginatedResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.DatastoresListNextOptionalParams, callback: msRest.ServiceCallback<Models.DatastorePropertiesResourceArmPaginatedResult>): void;
  listNext(nextPageLink: string, options?: Models.DatastoresListNextOptionalParams | msRest.ServiceCallback<Models.DatastorePropertiesResourceArmPaginatedResult>, callback?: msRest.ServiceCallback<Models.DatastorePropertiesResourceArmPaginatedResult>): Promise<Models.DatastoresListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.DatastoresListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.count0,
    Parameters.isDefault,
    Parameters.names,
    Parameters.searchText,
    Parameters.orderBy,
    Parameters.orderByAsc
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatastorePropertiesResourceArmPaginatedResult
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatastorePropertiesResource
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores/{name}",
  urlParameters: [
    Parameters.name,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.Body,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.DatastorePropertiesResource
    },
    201: {
      bodyMapper: Mappers.DatastorePropertiesResource
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const listSecretsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/datastores/{name}/listSecrets",
  urlParameters: [
    Parameters.name,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatastoreCredentials
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.count0,
    Parameters.isDefault,
    Parameters.names,
    Parameters.searchText,
    Parameters.orderBy,
    Parameters.orderByAsc
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DatastorePropertiesResourceArmPaginatedResult
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

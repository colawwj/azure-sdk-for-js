/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/linkedServicesMappers";
import * as Parameters from "../models/parameters";
import { AzureMachineLearningWorkspacesContext } from "../azureMachineLearningWorkspacesContext";

/** Class representing a LinkedServices. */
export class LinkedServices {
  private readonly client: AzureMachineLearningWorkspacesContext;

  /**
   * Create a LinkedServices.
   * @param {AzureMachineLearningWorkspacesContext} client Reference to the service client.
   */
  constructor(client: AzureMachineLearningWorkspacesContext) {
    this.client = client;
  }

  /**
   * List all linked services under an AML workspace.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedServicesListResponse>
   */
  list(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServicesListResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param callback The callback
   */
  list(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.LinkedServiceList>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedServiceList>): void;
  list(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedServiceList>, callback?: msRest.ServiceCallback<Models.LinkedServiceList>): Promise<Models.LinkedServicesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.LinkedServicesListResponse>;
  }

  /**
   * Add a new linked service.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param linkName Friendly name of the linked workspace
   * @param parameters The object for creating or updating a linked service
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedServicesCreateResponse>
   */
  create(resourceGroupName: string, workspaceName: string, linkName: string, parameters: Models.LinkedServiceRequest, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServicesCreateResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param linkName Friendly name of the linked workspace
   * @param parameters The object for creating or updating a linked service
   * @param callback The callback
   */
  create(resourceGroupName: string, workspaceName: string, linkName: string, parameters: Models.LinkedServiceRequest, callback: msRest.ServiceCallback<Models.LinkedServiceResponse>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param linkName Friendly name of the linked workspace
   * @param parameters The object for creating or updating a linked service
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, workspaceName: string, linkName: string, parameters: Models.LinkedServiceRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedServiceResponse>): void;
  create(resourceGroupName: string, workspaceName: string, linkName: string, parameters: Models.LinkedServiceRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedServiceResponse>, callback?: msRest.ServiceCallback<Models.LinkedServiceResponse>): Promise<Models.LinkedServicesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        linkName,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.LinkedServicesCreateResponse>;
  }

  /**
   * Get the detail of a linked service.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param linkName Friendly name of the linked workspace
   * @param [options] The optional parameters
   * @returns Promise<Models.LinkedServicesGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, linkName: string, options?: msRest.RequestOptionsBase): Promise<Models.LinkedServicesGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param linkName Friendly name of the linked workspace
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, linkName: string, callback: msRest.ServiceCallback<Models.LinkedServiceResponse>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param linkName Friendly name of the linked workspace
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, linkName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LinkedServiceResponse>): void;
  get(resourceGroupName: string, workspaceName: string, linkName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LinkedServiceResponse>, callback?: msRest.ServiceCallback<Models.LinkedServiceResponse>): Promise<Models.LinkedServicesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        linkName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LinkedServicesGetResponse>;
  }

  /**
   * Delete a linked service.
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param linkName Friendly name of the linked workspace
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, linkName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param linkName Friendly name of the linked workspace
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, linkName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group in which workspace is located.
   * @param workspaceName Name of Azure Machine Learning workspace.
   * @param linkName Friendly name of the linked workspace
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, linkName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, workspaceName: string, linkName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        linkName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedServices",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedServiceList
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedServices/{linkName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.linkName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.LinkedServiceRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LinkedServiceResponse
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedServices/{linkName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.linkName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LinkedServiceResponse
    },
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MachineLearningServices/workspaces/{workspaceName}/linkedServices/{linkName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.linkName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.MachineLearningServiceError
    }
  },
  serializer
};

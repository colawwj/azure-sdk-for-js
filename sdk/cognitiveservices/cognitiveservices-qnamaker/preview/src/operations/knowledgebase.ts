/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/knowledgebaseMappers";
import * as Parameters from "../models/parameters";
import { QnAMakerClientContext } from "../qnAMakerClientContext";

/** Class representing a Knowledgebase. */
export class Knowledgebase {
  private readonly client: QnAMakerClientContext;

  /**
   * Create a Knowledgebase.
   * @param {QnAMakerClientContext} client Reference to the service client.
   */
  constructor(client: QnAMakerClientContext) {
    this.client = client;
  }

  /**
   * @summary GenerateAnswer call to query knowledgebase (QnA Maker Managed).
   * @param kbId Knowledgebase id.
   * @param generateAnswerPayload Post body of the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.KnowledgebaseGenerateAnswerResponse>
   */
  generateAnswer(kbId: string, generateAnswerPayload: Models.Query, options?: msRest.RequestOptionsBase): Promise<Models.KnowledgebaseGenerateAnswerResponse>;
  /**
   * @param kbId Knowledgebase id.
   * @param generateAnswerPayload Post body of the request.
   * @param callback The callback
   */
  generateAnswer(kbId: string, generateAnswerPayload: Models.Query, callback: msRest.ServiceCallback<Models.QnASearchResultList>): void;
  /**
   * @param kbId Knowledgebase id.
   * @param generateAnswerPayload Post body of the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  generateAnswer(kbId: string, generateAnswerPayload: Models.Query, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.QnASearchResultList>): void;
  generateAnswer(kbId: string, generateAnswerPayload: Models.Query, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.QnASearchResultList>, callback?: msRest.ServiceCallback<Models.QnASearchResultList>): Promise<Models.KnowledgebaseGenerateAnswerResponse> {
    return this.client.sendOperationRequest(
      {
        kbId,
        generateAnswerPayload,
        options
      },
      generateAnswerOperationSpec,
      callback) as Promise<Models.KnowledgebaseGenerateAnswerResponse>;
  }

  /**
   * @summary Train call to add suggestions to knowledgebase (QnAMaker Managed).
   * @param kbId Knowledgebase id.
   * @param trainPayload Post body of the request.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  train(kbId: string, trainPayload: Models.FeedbackRecords, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param kbId Knowledgebase id.
   * @param trainPayload Post body of the request.
   * @param callback The callback
   */
  train(kbId: string, trainPayload: Models.FeedbackRecords, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param kbId Knowledgebase id.
   * @param trainPayload Post body of the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  train(kbId: string, trainPayload: Models.FeedbackRecords, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  train(kbId: string, trainPayload: Models.FeedbackRecords, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        kbId,
        trainPayload,
        options
      },
      trainOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const generateAnswerOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "knowledgebases/{kbId}/generateAnswer",
  urlParameters: [
    Parameters.endpoint,
    Parameters.kbId
  ],
  requestBody: {
    parameterPath: "generateAnswerPayload",
    mapper: {
      ...Mappers.Query,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.QnASearchResultList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const trainOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "knowledgebases/{kbId}/train",
  urlParameters: [
    Parameters.endpoint,
    Parameters.kbId
  ],
  requestBody: {
    parameterPath: "trainPayload",
    mapper: {
      ...Mappers.FeedbackRecords,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

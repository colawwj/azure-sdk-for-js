/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as msRest from "@azure/ms-rest-js";


export const Metadata: msRest.CompositeMapper = {
  serializedName: "Metadata",
  type: {
    name: "Composite",
    className: "Metadata",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        constraints: {
          MaxLength: 100,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        constraints: {
          MaxLength: 500,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Context: msRest.CompositeMapper = {
  serializedName: "Context",
  type: {
    name: "Composite",
    className: "Context",
    modelProperties: {
      isContextOnly: {
        serializedName: "isContextOnly",
        type: {
          name: "Boolean"
        }
      },
      prompts: {
        serializedName: "prompts",
        constraints: {
          MaxItems: 20
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Prompt"
            }
          }
        }
      }
    }
  }
};

export const QnAContext: msRest.CompositeMapper = {
  serializedName: "QnA_context",
  type: {
    name: "Composite",
    className: "QnAContext",
    modelProperties: {
      ...Context.type.modelProperties
    }
  }
};

export const QnA: msRest.CompositeMapper = {
  serializedName: "QnA",
  type: {
    name: "Composite",
    className: "QnA",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      answer: {
        required: true,
        serializedName: "answer",
        constraints: {
          MaxLength: 25000,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        constraints: {
          MaxLength: 300
        },
        type: {
          name: "String"
        }
      },
      questions: {
        required: true,
        serializedName: "questions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metadata"
            }
          }
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "QnAContext"
        }
      },
      lastUpdatedTimestamp: {
        serializedName: "lastUpdatedTimestamp",
        constraints: {
          MaxLength: 300
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PromptQna: msRest.CompositeMapper = {
  serializedName: "Prompt_qna",
  type: {
    name: "Composite",
    className: "PromptQna",
    modelProperties: {
      ...QnA.type.modelProperties
    }
  }
};

export const Prompt: msRest.CompositeMapper = {
  serializedName: "Prompt",
  type: {
    name: "Composite",
    className: "Prompt",
    modelProperties: {
      displayOrder: {
        serializedName: "displayOrder",
        type: {
          name: "Number"
        }
      },
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "Number"
        }
      },
      qna: {
        serializedName: "qna",
        type: {
          name: "Composite",
          className: "PromptQna"
        }
      },
      displayText: {
        serializedName: "displayText",
        constraints: {
          MaxLength: 200
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: msRest.CompositeMapper = {
  serializedName: "Error",
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InnerErrorModel"
        }
      }
    }
  }
};

export const ErrorResponseError: msRest.CompositeMapper = {
  serializedName: "ErrorResponse_error",
  type: {
    name: "Composite",
    className: "ErrorResponseError",
    modelProperties: {
      ...ErrorModel.type.modelProperties
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponseError"
        }
      }
    }
  }
};

export const InnerErrorModel: msRest.CompositeMapper = {
  serializedName: "InnerErrorModel",
  type: {
    name: "Composite",
    className: "InnerErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      innerError: {
        serializedName: "innerError",
        type: {
          name: "Composite",
          className: "InnerErrorModel"
        }
      }
    }
  }
};

export const QueryContextModel: msRest.CompositeMapper = {
  serializedName: "QueryContext",
  type: {
    name: "Composite",
    className: "QueryContextModel",
    modelProperties: {
      previousQnaId: {
        serializedName: "previousQnaId",
        type: {
          name: "Number"
        }
      },
      previousUserQuery: {
        serializedName: "previousUserQuery",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryContext: msRest.CompositeMapper = {
  serializedName: "Query_context",
  type: {
    name: "Composite",
    className: "QueryContext",
    modelProperties: {
      ...QueryContextModel.type.modelProperties
    }
  }
};

export const AnswerSpanRequest: msRest.CompositeMapper = {
  serializedName: "AnswerSpanRequest",
  type: {
    name: "Composite",
    className: "AnswerSpanRequest",
    modelProperties: {
      enable: {
        serializedName: "enable",
        type: {
          name: "Boolean"
        }
      },
      scoreThreshold: {
        serializedName: "scoreThreshold",
        type: {
          name: "Number"
        }
      },
      topAnswersWithSpan: {
        serializedName: "topAnswersWithSpan",
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QueryAnswerSpanRequest: msRest.CompositeMapper = {
  serializedName: "Query_answerSpanRequest",
  type: {
    name: "Composite",
    className: "QueryAnswerSpanRequest",
    modelProperties: {
      ...AnswerSpanRequest.type.modelProperties
    }
  }
};

export const Query: msRest.CompositeMapper = {
  serializedName: "Query",
  type: {
    name: "Composite",
    className: "Query",
    modelProperties: {
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "String"
        }
      },
      question: {
        serializedName: "question",
        type: {
          name: "String"
        }
      },
      top: {
        serializedName: "top",
        type: {
          name: "Number"
        }
      },
      userId: {
        serializedName: "userId",
        type: {
          name: "String"
        }
      },
      isTest: {
        serializedName: "isTest",
        type: {
          name: "Boolean"
        }
      },
      scoreThreshold: {
        serializedName: "scoreThreshold",
        type: {
          name: "Number"
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "QueryContext"
        }
      },
      rankerType: {
        serializedName: "rankerType",
        type: {
          name: "String"
        }
      },
      strictFilters: {
        serializedName: "strictFilters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metadata"
            }
          }
        }
      },
      strictFiltersCompoundOperationType: {
        serializedName: "strictFiltersCompoundOperationType",
        type: {
          name: "String"
        }
      },
      answerSpanRequest: {
        serializedName: "answerSpanRequest",
        type: {
          name: "Composite",
          className: "QueryAnswerSpanRequest"
        }
      }
    }
  }
};

export const QnASearchResultContext: msRest.CompositeMapper = {
  serializedName: "QnASearchResult_context",
  type: {
    name: "Composite",
    className: "QnASearchResultContext",
    modelProperties: {
      ...Context.type.modelProperties
    }
  }
};

export const AnswerSpanResponse: msRest.CompositeMapper = {
  serializedName: "AnswerSpanResponse",
  type: {
    name: "Composite",
    className: "AnswerSpanResponse",
    modelProperties: {
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      score: {
        serializedName: "score",
        type: {
          name: "Number"
        }
      },
      startIndex: {
        serializedName: "startIndex",
        type: {
          name: "Number"
        }
      },
      endIndex: {
        serializedName: "endIndex",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QnASearchResultAnswerSpan: msRest.CompositeMapper = {
  serializedName: "QnASearchResult_answerSpan",
  type: {
    name: "Composite",
    className: "QnASearchResultAnswerSpan",
    modelProperties: {
      ...AnswerSpanResponse.type.modelProperties
    }
  }
};

export const QnASearchResult: msRest.CompositeMapper = {
  serializedName: "QnASearchResult",
  type: {
    name: "Composite",
    className: "QnASearchResult",
    modelProperties: {
      questions: {
        serializedName: "questions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      answer: {
        serializedName: "answer",
        type: {
          name: "String"
        }
      },
      score: {
        serializedName: "score",
        type: {
          name: "Number"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metadata"
            }
          }
        }
      },
      context: {
        serializedName: "context",
        type: {
          name: "Composite",
          className: "QnASearchResultContext"
        }
      },
      answerSpan: {
        serializedName: "answerSpan",
        type: {
          name: "Composite",
          className: "QnASearchResultAnswerSpan"
        }
      }
    }
  }
};

export const QnASearchResultList: msRest.CompositeMapper = {
  serializedName: "QnASearchResultList",
  type: {
    name: "Composite",
    className: "QnASearchResultList",
    modelProperties: {
      answers: {
        serializedName: "answers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QnASearchResult"
            }
          }
        }
      }
    }
  }
};

export const FeedbackRecord: msRest.CompositeMapper = {
  serializedName: "FeedbackRecord",
  type: {
    name: "Composite",
    className: "FeedbackRecord",
    modelProperties: {
      userId: {
        serializedName: "userId",
        type: {
          name: "String"
        }
      },
      userQuestion: {
        serializedName: "userQuestion",
        constraints: {
          MaxLength: 1000
        },
        type: {
          name: "String"
        }
      },
      qnaId: {
        serializedName: "qnaId",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FeedbackRecords: msRest.CompositeMapper = {
  serializedName: "FeedbackRecords",
  type: {
    name: "Composite",
    className: "FeedbackRecords",
    modelProperties: {
      feedbackRecords: {
        serializedName: "feedbackRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FeedbackRecord"
            }
          }
        }
      }
    }
  }
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */


import * as msRest from "@azure/ms-rest-js";

/**
 * Name - value pair of metadata.
 */
export interface Metadata {
  /**
   * Metadata name.
   */
  name: string;
  /**
   * Metadata value.
   */
  value: string;
}

/**
 * Context associated with Qna.
 */
export interface Context {
  /**
   * To mark if a prompt is relevant only with a previous question or not.
   * true - Do not include this QnA as search result for queries without context
   * false - ignores context and includes this QnA in search result
   */
  isContextOnly?: boolean;
  /**
   * List of prompts associated with the answer.
   */
  prompts?: Prompt[];
}

/**
 * Context of a QnA
 */
export interface QnAContext extends Context {
}

/**
 * Q-A object.
 */
export interface QnA {
  /**
   * Unique id for the Q-A.
   */
  id?: number;
  /**
   * Answer text
   */
  answer: string;
  /**
   * Source from which Q-A was indexed. eg.
   * https://docs.microsoft.com/en-us/azure/cognitive-services/QnAMaker/FAQs
   */
  source?: string;
  /**
   * List of questions associated with the answer.
   */
  questions: string[];
  /**
   * List of metadata associated with the answer.
   */
  metadata?: Metadata[];
  /**
   * Context of a QnA
   */
  context?: QnAContext;
  /**
   * Timestamp when the QnA was last updated.
   */
  lastUpdatedTimestamp?: string;
}

/**
 * QnA - Either QnaId or QnA needs to be present in a Prompt object
 */
export interface PromptQna extends QnA {
}

/**
 * Prompt for an answer.
 */
export interface Prompt {
  /**
   * Index of the prompt - used in ordering of the prompts
   */
  displayOrder?: number;
  /**
   * Qna id corresponding to the prompt - if QnaId is present, QnA object is ignored.
   */
  qnaId?: number;
  /**
   * QnA - Either QnaId or QnA needs to be present in a Prompt object
   */
  qna?: PromptQna;
  /**
   * Text displayed to represent a follow up question prompt
   */
  displayText?: string;
}

/**
 * The error object. As per Microsoft One API guidelines -
 * https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
 */
export interface ErrorModel {
  /**
   * One of a server-defined set of error codes. Possible values include: 'BadArgument',
   * 'Forbidden', 'NotFound', 'KbNotFound', 'Unauthorized', 'Unspecified', 'EndpointKeysError',
   * 'QuotaExceeded', 'QnaRuntimeError', 'SKULimitExceeded', 'OperationNotFound', 'ServiceError',
   * 'ValidationFailure', 'ExtractionFailure'
   */
  code: ErrorCodeType;
  /**
   * A human-readable representation of the error.
   */
  message?: string;
  /**
   * The target of the error.
   */
  target?: string;
  /**
   * An array of details about specific errors that led to this reported error.
   */
  details?: ErrorModel[];
  /**
   * An object containing more specific information than the current object about the error.
   */
  innerError?: InnerErrorModel;
}

/**
 * The error object.
 */
export interface ErrorResponseError extends ErrorModel {
}

/**
 * Error response. As per Microsoft One API guidelines -
 * https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
 */
export interface ErrorResponse {
  /**
   * The error object.
   */
  error?: ErrorResponseError;
}

/**
 * An object containing more specific information about the error. As per Microsoft One API
 * guidelines -
 * https://github.com/Microsoft/api-guidelines/blob/vNext/Guidelines.md#7102-error-condition-responses.
 */
export interface InnerErrorModel {
  /**
   * A more specific error code than was provided by the containing error.
   */
  code?: string;
  /**
   * An object containing more specific information than the current object about the error.
   */
  innerError?: InnerErrorModel;
}

/**
 * Context object with previous QnA's information.
 */
export interface QueryContextModel {
  /**
   * Previous QnA Id - qnaId of the top result.
   */
  previousQnaId?: number;
  /**
   * Previous user query.
   */
  previousUserQuery?: string;
}

/**
 * Context object with previous QnA's information.
 */
export interface QueryContext extends QueryContextModel {
}

/**
 * To configure Answer span prediction feature.
 */
export interface AnswerSpanRequest {
  /**
   * Enable or Disable Answer Span prediction.
   */
  enable?: boolean;
  /**
   * Minimum threshold score required to include an answer span.
   */
  scoreThreshold?: number;
  /**
   * Number of Top answers to be considered for span prediction.
   */
  topAnswersWithSpan?: number;
}

/**
 * To configure Answer span prediction feature.
 */
export interface QueryAnswerSpanRequest extends AnswerSpanRequest {
}

/**
 * POST body schema to query the knowledgebase.
 */
export interface Query {
  /**
   * Exact qnaId to fetch from the knowledgebase, this field takes priority over question.
   */
  qnaId?: string;
  /**
   * User question to query against the knowledge base.
   */
  question?: string;
  /**
   * Max number of answers to be returned for the question.
   */
  top?: number;
  /**
   * Unique identifier for the user.
   */
  userId?: string;
  /**
   * Query against the test index.
   */
  isTest?: boolean;
  /**
   * Minimum threshold score for answers.
   */
  scoreThreshold?: number;
  /**
   * Context object with previous QnA's information.
   */
  context?: QueryContext;
  /**
   * Optional field. Set to 'QuestionOnly' for using a question only Ranker.
   */
  rankerType?: string;
  /**
   * Find QnAs that are associated with the given list of metadata.
   */
  strictFilters?: Metadata[];
  /**
   * Optional field. Set to 'OR' for using OR operation for strict filters. Possible values
   * include: 'AND', 'OR'
   */
  strictFiltersCompoundOperationType?: StrictFiltersCompoundOperationType;
  /**
   * To configure Answer span prediction feature.
   */
  answerSpanRequest?: QueryAnswerSpanRequest;
}

/**
 * Context object of the QnA
 */
export interface QnASearchResultContext extends Context {
}

/**
 * Answer span object of QnA.
 */
export interface AnswerSpanResponse {
  /**
   * Predicted text of answer span.
   */
  text?: string;
  /**
   * Predicted score of answer span.
   */
  score?: number;
  /**
   * Start index of answer span in answer.
   */
  startIndex?: number;
  /**
   * End index of answer span in answer.
   */
  endIndex?: number;
}

/**
 * Answer span object of QnA with respect to user's question.
 */
export interface QnASearchResultAnswerSpan extends AnswerSpanResponse {
}

/**
 * Represents Search Result.
 */
export interface QnASearchResult {
  /**
   * List of questions.
   */
  questions?: string[];
  /**
   * Answer.
   */
  answer?: string;
  /**
   * Search result score.
   */
  score?: number;
  /**
   * Id of the QnA result.
   */
  id?: number;
  /**
   * Source of QnA result.
   */
  source?: string;
  /**
   * List of metadata.
   */
  metadata?: Metadata[];
  /**
   * Context object of the QnA
   */
  context?: QnASearchResultContext;
  /**
   * Answer span object of QnA with respect to user's question.
   */
  answerSpan?: QnASearchResultAnswerSpan;
}

/**
 * Represents List of Question Answers.
 */
export interface QnASearchResultList {
  /**
   * Represents Search Result list.
   */
  answers?: QnASearchResult[];
}

/**
 * Active learning feedback record.
 */
export interface FeedbackRecord {
  /**
   * Unique identifier for the user.
   */
  userId?: string;
  /**
   * The suggested question being provided as feedback.
   */
  userQuestion?: string;
  /**
   * The qnaId for which the suggested question is provided as feedback.
   */
  qnaId?: number;
}

/**
 * Active learning feedback records.
 */
export interface FeedbackRecords {
  /**
   * List of feedback records.
   */
  feedbackRecords?: FeedbackRecord[];
}

/**
 * Defines values for ErrorCodeType.
 * Possible values include: 'BadArgument', 'Forbidden', 'NotFound', 'KbNotFound', 'Unauthorized',
 * 'Unspecified', 'EndpointKeysError', 'QuotaExceeded', 'QnaRuntimeError', 'SKULimitExceeded',
 * 'OperationNotFound', 'ServiceError', 'ValidationFailure', 'ExtractionFailure'
 * @readonly
 * @enum {string}
 */
export type ErrorCodeType = 'BadArgument' | 'Forbidden' | 'NotFound' | 'KbNotFound' | 'Unauthorized' | 'Unspecified' | 'EndpointKeysError' | 'QuotaExceeded' | 'QnaRuntimeError' | 'SKULimitExceeded' | 'OperationNotFound' | 'ServiceError' | 'ValidationFailure' | 'ExtractionFailure';

/**
 * Defines values for StrictFiltersCompoundOperationType.
 * Possible values include: 'AND', 'OR'
 * @readonly
 * @enum {string}
 */
export type StrictFiltersCompoundOperationType = 'AND' | 'OR';

/**
 * Contains response data for the generateAnswer operation.
 */
export type KnowledgebaseGenerateAnswerResponse = QnASearchResultList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QnASearchResultList;
    };
};
